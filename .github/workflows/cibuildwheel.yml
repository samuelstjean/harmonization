name: Build and upload to PyPI

on:
  pull_request:
  release:
    types:
      - published

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-13, macos-14, windows-latest]
        toolchain:
            - {compiler: gcc, version: 13}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.10'

      - name: Setup Fortran
        uses: fortran-lang/setup-fortran@v1
        id: setup-fortran
        with:
          compiler: ${{ matrix.toolchain.compiler }}
          version: ${{ matrix.toolchain.version }}

      - name: Mac os deployment target
        if: runner.os == 'macOS'
        run: |
          if [[ ${{ matrix.os }} == "macos-13" ]]; then
            {
              echo "MACOSX_DEPLOYMENT_TARGET=13.0"
            } >> "$GITHUB_ENV"
          fi

          if [[ ${{ matrix.os}} == "macos-14" ]]; then
            {
              echo "MACOSX_DEPLOYMENT_TARGET=14.0"
            } >> "$GITHUB_ENV"
          fi

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3

      - name: Test against oldest supported numpy version
        shell: bash
        run: |
            python -m pip install ./wheelhouse/*cp310*.whl
            python -m pip install numpy==1.23 scipy==1.8 pytest
            pytest --pyargs harmonization

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-harmonization_${{ matrix.os }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.10'

      - name: Build sdist
        run: |
          python -m pip install build
          python -m build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-sdist
          path: dist/*.tar.gz

  publish_artifacts:
    name: publish to pypi and github release
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write
      contents: write
    # upload to PyPI on every tag starting with 'v'
    # if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    steps:
      - name: Download builds
        uses: actions/download-artifact@v4
        with:
          path: dist/
          pattern: cibw-*
          merge-multiple: true

      # See also https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
      - name: upload to pypi
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: publish to github release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
